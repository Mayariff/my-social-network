{"version":3,"sources":["components/Users/Users.module.css","components/Dialogs/Message/Message.module.css","components/Profile/ProfileInfo/ProfileInfo.module.css","redux/Auth-reduser.tsx","components/Nav/FriendsBlock/Friend/Friend.tsx","components/Nav/FriendsBlock/FriendsBlock.tsx","components/Nav/FriendsBlock/FriendsBlockContainer.tsx","components/Nav/Nav.tsx","components/News/News.tsx","components/Music/Music.tsx","components/Settings/Settings.tsx","API/Api.ts","utilits/object-helper.js","redux/User-reducer.tsx","assets/image/user.jpg","components/Users/User.tsx","components/Users/Users.tsx","assets/image/loading.gif","components/common/Preloader.tsx","redux/users-selectors.tsx","components/common/Pagenator/Pagenator.tsx","components/Users/UsersContainer.tsx","components/Header/Header.tsx","components/Header/HeaderContainer.tsx","components/common/formControls/formControls.tsx","utilits/valid.ts","components/Login/LoginForm.tsx","components/Login/Login.tsx","redux/App-reduser.tsx","redux/Profile-reducer.tsx","redux/Dialog-reducer.tsx","redux/Navbar-reducer.tsx","redux/redux-store.tsx","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/Dialogs.tsx","hoc/withAuthRedirect.tsx","components/Dialogs/DialogsContainer.tsx","components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/My_posts/Post/Post.tsx","components/Profile/My_posts/MyPosts.tsx","components/Profile/My_posts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx","App.tsx","index.tsx","components/Nav/Nav.module.css","components/common/Pagenator/Pagenator.module.css","components/common/formControls/FormControle.module.css","components/Dialogs/Dialogs.module.css","components/Nav/FriendsBlock/FriendsBlock.module.css","components/Header/Header.module.css","components/Dialogs/DialogItem/DialogItem.module.css","components/Profile/My_posts/My_posts.module.css","components/Profile/My_posts/Post/Post.module.css"],"names":["module","exports","ResultCodesEnum","Friend","props","src","avatar","alt","className","s","name","FriendsBlock","elementFriend","friends","map","f","id","friendAvatar","FriendsBlockContainer","connect","state","navbarBlock","Nav","classes","nav","item","to","News","Music","Settings","instance","axios","create","withCredentials","baseURL","headers","usersAPI","getUsers","currentPage","pageSize","get","then","response","data","follow","userID","post","unfollow","delete","getProfile","userId","ProfileAPI","getStatus","updateStatus","status","put","AuthAPI","res","email","password","rememberMe","updateObjectInArray","items","itemID","objPropName","newObjectProps","i","FOLLOW","UN_FOLLOW","SET_USERS","SET_CURRENT_PAGES","SET_TOTAL_USERS_COUNT","TOGGLE_IS_FETCHING","TOGGLE_IS_FOLLOWING_PROGRESS","initialState","users","totalUsersCount","isFetching","followingInProgress","followSuccess","type","unFollowSuccess","setCurrentPages","setToggleIsFetching","setToggleFollowingProgress","User","user","photos","small","userPhoto","photo","followed","disabled","some","onClick","Users","u","Preloader","loading","getPageSize","getTotalUsersCount","getCurrentPage","getIsFetching","getFollowingInProgress","Pagenator","totalItemsCount","onPageChanged","portionSize","pagesCount","Math","ceil","pages","push","portionCount","useState","portionNumber","setPortionNumber","leftPortionNumber","rightPortionNumber","prevDisabledCondition","nextDisabledCondition","paginator","bottomDisabled","filter","p","page","selectedPage","v1","UsersAPIComponent","pageNumber","requestUsers","this","usersPage","acceptUnFollow","acceptFollow","React","Component","compose","dispatch","a","totalCount","count","Header","header","loginBlock","isAuth","login","logout","SET_USER_DATA","setAuthUserData","payload","getAuthUserData","resultCode","Success","HeaderContainer","auth","FormControl","meta","touched","error","children","hasError","formControl","TextArea","input","restProps","Input","createField","placeholder","validators","component","text","Field","validate","RequiredField","value","undefined","MaxLenghtCreator","maxLength","length","LoginReduxForm","reduxForm","form","handleSubmit","onSubmit","formSMRError","message","messages","stopSubmit","_error","formData","INITIALIZE_SUCCESS","initialized","ADD_POST","SET_USER_PROFILE","SET_STATUS","DELETE_POST","posts","content","likescount","profile","setStatus","ADD_MESSAGE","dialogs","newMessageText","rootReducer","combineReducers","profilePage","action","newPost","newPostBody","copy","FilteredPosts","dialogPage","newMessage","newMessageBody","newUsers","formReducer","app","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","store","createStore","applyMiddleware","thunkMiddleware","_store_","DialogItem","path","dialog","active","Massage","massage","AddMessageFormReduxForm","styleSendMessage","button","Dialogs","dialogElements","d","massagesElements","m","dialogsItems","massages","values","addMessage","console","log","mapStateToPropsForRedirect","AddMessageAC","ProfileStatusWithHooks","editMode","setEditMode","useEffect","onDoubleClick","onBlur","onChange","e","currentTarget","autoFocus","ProfileInfo","descriptionBlock","large","Ava","Post","MyPosts","memo","postsElement","reverse","postsBlock","addPost","MyPostsContainer","Profile","ProfileContainer","match","params","autorizedUserID","history","getUserProfile","withRouter","App","initializeApp","render","DialogsContainer","UsersContainer","AppContainer","promise","Promise","all","MainApp","basename","process","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.0044e329.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"photo\":\"Users_photo__stIQL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"massage\":\"Message_massage__3Y0V3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__11Y08\",\"containers\":\"ProfileInfo_containers__1YxWT\"};","import {AuthAPI} from \"../API/Api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {stopSubmit} from \"redux-form\";\r\nimport {AppThunk} from \"./redux-store\";\r\n\r\n\r\nconst SET_USER_DATA = 'authReducer/SET_USER_DATA'\r\n\r\n\r\nexport type InitialStateType = {\r\n    userId: number | null\r\n    email: string | null\r\n    login: string | null\r\n    isAuth: boolean\r\n}\r\n\r\nlet initialState: InitialStateType = {\r\n    userId: null,\r\n    email: null,\r\n    login: null,\r\n    isAuth: false\r\n    /* id: 2 as number,\r\n     email: 'blabla@bla.bla' as string|null,\r\n     login: 'samurai' as string|null,\r\n     isAuth: false*/\r\n}\r\n\r\nexport const authReducer = (state: InitialStateType = initialState, action: AuthActionTypes): InitialStateType => {\r\n    switch (action.type) {\r\n        case SET_USER_DATA:\r\n            return {\r\n                ...state,\r\n                ...action.payload,\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n};\r\nexport type AuthActionTypes = ReturnType<typeof setAuthUserData>\r\n\r\n\r\nexport const setAuthUserData = (userId: number, email: string, login: string, isAuth: boolean) => {\r\n    return {\r\n        type: SET_USER_DATA,\r\n        payload: {userId, email, login, isAuth}\r\n    } as const\r\n}\r\n\r\nexport enum ResultCodesEnum {\r\n    Success,\r\n    Error = 1,\r\n}\r\n\r\nexport type  MeResponseType = {\r\n    data: {\r\n        id: number\r\n        email: string\r\n        login: string\r\n    }\r\n    resultCode: ResultCodesEnum\r\n    messages: Array<string>\r\n}\r\n\r\n\r\nexport const getAuthUserData = () => async (dispatch: Dispatch<AuthActionTypes>) => {\r\n    let response = await AuthAPI.me()\r\n    if (response.resultCode === ResultCodesEnum.Success) {\r\n        let {id, email, login} = response.data\r\n        dispatch(setAuthUserData(id, email, login, true));\r\n    }\r\n}\r\n\r\nexport const login = (email: string, password: string, rememberMe: boolean): AppThunk => async (dispatch) => {\r\n    let response = await AuthAPI.login(email, password, rememberMe)\r\n    if (response.resultCode === ResultCodesEnum.Success) {\r\n        dispatch(getAuthUserData());\r\n    } else {\r\n        let message = response.messages.length > 0 ? response.messages[0] : \"Some error\";\r\n        dispatch(stopSubmit('login', {_error: message}));\r\n    }\r\n}\r\nexport const logout = () => async (dispatch: Dispatch<AuthActionTypes>) => {\r\n    let response = await AuthAPI.logout()\r\n    if (response.data.resultCode === ResultCodesEnum.Success) {\r\n        dispatch(setAuthUserData(0, \" \", \" \", false));\r\n    }\r\n}","import React from 'react';\r\nimport s from \"../FriendsBlock.module.css\";\r\nimport {friendType} from \"../../../../redux/Navbar-reducer\";\r\n\r\n\r\nconst Friend = (props:friendType) => {\r\n    return (\r\n            <div>\r\n                <img src={props.avatar}  alt='avatar' />\r\n                <br/><span className={s.name}> {props.name} </span>\r\n            </div>\r\n            );\r\n};\r\n\r\nexport default Friend;","import React from \"react\";\r\nimport s from \"./FriendsBlock.module.css\";\r\nimport Friend from \"./Friend/Friend\";\r\nimport {navbarBlockType} from \"../../../redux/store\";\r\nimport {friendType} from \"../../../redux/Navbar-reducer\";\r\n\r\n\r\nconst FriendsBlock = (props: navbarBlockType) =>{\r\n\r\n    let elementFriend = props.friends.map((f:friendType) => <Friend id={f.id} key={f.id} name = {f.name} avatar = {f.avatar}/>)\r\n    return (\r\n\r\n        <div className={s.friendAvatar}>\r\n            <h2>Friends</h2>\r\n           {elementFriend}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default FriendsBlock;","import FriendsBlock from \"./FriendsBlock\";\r\nimport {connect} from \"react-redux\";\r\nimport {friendType} from \"../../../redux/Navbar-reducer\";\r\nimport {AppStateType} from \"../../../redux/redux-store\";\r\n\r\n\r\ntype mapStateToPropsType= {\r\n    friends: Array<friendType>\r\n}\r\nconst  mapStateToProps=(state:AppStateType):mapStateToPropsType => {\r\n    return {\r\n       friends: state.navbarBlock.friends\r\n    }\r\n}\r\n\r\n\r\n/*const mapDispatchToProps =(dispatch:any)=>{\r\n    return{  }\r\n    }*/\r\n\r\n\r\nexport const FriendsBlockContainer = connect(mapStateToProps)(FriendsBlock)\r\n\r\nexport default FriendsBlockContainer","import React from \"react\";\r\nimport  classes from './Nav.module.css'\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {FriendsBlockContainer} from \"./FriendsBlock/FriendsBlockContainer\";\r\n\r\n\r\nconst Nav =(props: any) =>{\r\n    return(\r\n            <nav className={classes.nav}>\r\n                <div className={classes.item}><NavLink to=\"/profile\"> Profile</NavLink></div>\r\n                <div className={classes.item}><NavLink to=\"/dialogs\"> Messages</NavLink></div>\r\n                <div className={classes.item}><NavLink to=\"/users\"> Users </NavLink></div>\r\n                <div className={classes.item}><NavLink to=\"/news\"> News</NavLink></div>\r\n                <div className={classes.item}><NavLink to=\"/music\"> Music</NavLink></div>\r\n                <div className={classes.item}><NavLink to=\"/settings\"> Settings</NavLink></div>\r\n                <FriendsBlockContainer />\r\n            </nav>\r\n\r\n    )\r\n}\r\nexport default Nav;","import React from \"react\";\r\n\r\nconst News = (props: any) => {\r\n    return (\r\n        <div>\r\n\r\n        </div>)\r\n\r\n\r\n}\r\n\r\nexport default News;","import React from \"react\";\r\n//import s from \"Settings.module.css\";\r\n\r\nconst Music = (props:any)  => {\r\n    return(\r\n        <div>\r\n            Music\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Music;","import React from \"react\";\r\n//import s from \"Settings.module.css\";\r\n\r\nconst Settings = (props:any)  => {\r\n    return(\r\n        <div>\r\n            Settings\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Settings;","import axios from \"axios\";\r\nimport {MeResponseType, ResultCodesEnum} from \"../redux/Auth-reduser\";\r\nimport {userType} from \"../redux/User-reducer\";\r\n\r\n\r\n\r\nconst instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: `https://social-network.samuraijs.com/api/1.0/`,\r\n    headers: {\r\n        \"API-KEY\": `db794384-dee3-4cf5-8ceb-d18f4dd3b92a` },\r\n});\r\nexport type UserResponseType= {\r\n    items: Array<userType>\r\n    totalCount: number\r\n    error: string\r\n    resultCode: ResultCodesEnum\r\n}\r\n\r\nexport const usersAPI = {\r\n    getUsers(currentPage = 1, pageSize = 10) {\r\n        return instance.get(`users?page= ${currentPage}&count= ${pageSize}`)\r\n            .then(response => {\r\n                return response.data\r\n            })\r\n    },\r\n    follow(userID: number){\r\n        return  instance.post<UserResponseType>(`follow/${userID}`)\r\n    },\r\n    unfollow(userID: number){\r\n        return instance.delete(`follow/${userID}`)\r\n    },\r\n    getProfile(userId: number){\r\n        return ProfileAPI.getProfile(userId)\r\n    },\r\n}\r\n\r\nexport type ProfileResponseType ={\r\n    userId: number\r\n    lookingForAJob: boolean\r\n    lookingForAJobDescription: string\r\n    fullName: string\r\n    contacts: {\r\n    github: string\r\n    vk: string\r\n    facebook: string\r\n    instagram: string\r\n    twitter: string\r\n    website: string\r\n    youtube: string\r\n    mainLink: string}\r\n    photos: {\r\n    small: string\r\n    URL: string |null\r\n    large: string}\r\n}\r\n\r\nexport const ProfileAPI = {\r\n    getProfile(userId: number) {\r\n        return instance.get<ProfileResponseType>('profile/' + userId);\r\n    },\r\n    getStatus(userId: number){\r\n        return instance.get('profile/status/' + userId);\r\n    },\r\n    updateStatus(status: string){\r\n        return instance.put('profile/status', {status:status});\r\n    }\r\n}\r\nexport  type LoginMeResponseType ={\r\n    payload :{\r\n        userID: number\r\n    }\r\n    resultCode: ResultCodesEnum\r\n    messages: Array<string>\r\n}\r\n\r\nexport const AuthAPI ={\r\n    me(){\r\n        return instance.get<MeResponseType>(`auth/me`).then(res=>res.data);;\r\n    },\r\n    login(email: string, password: string, rememberMe:boolean = false){\r\n        return instance.post<LoginMeResponseType>(`auth/login`,{email, password, rememberMe }).then(res=>res.data);\r\n    },\r\n    logout(){\r\n        return instance.delete<MeResponseType>(`auth/login`)\r\n    }\r\n}","export  const updateObjectInArray = (items, itemID, objPropName, newObjectProps) => {\r\n   return items.map(i => {\r\n            if (i[objPropName] === itemID ) {\r\n                return {...i, ...newObjectProps}\r\n            }\r\n            return i\r\n        })\r\n};\r\n\r\n","import {usersAPI} from \"../API/Api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {ThunkAction} from \"redux-thunk\";\r\nimport {AxiosResponse} from \"axios\";\r\nimport {updateObjectInArray} from \"../utilits/object-helper\";\r\n\r\nconst FOLLOW = 'userReducer/FOLLOW'\r\nconst UN_FOLLOW = 'userReducer/UN-FOLLOW';\r\nconst SET_USERS = \"userReducer/SET_USERS\";\r\nconst SET_CURRENT_PAGES = \"userReducer/SET_CURRENT_PAGES\";\r\nconst SET_TOTAL_USERS_COUNT = \"userReducer/SET_TOTAL_USERS_COUNT\";\r\nconst TOGGLE_IS_FETCHING = \"userReducer/TOGGLE_IS_FETCHING\";\r\nconst TOGGLE_IS_FOLLOWING_PROGRESS = \"userReducer/TOGGLE_IS_FOLLOWING_PROGRESS\";\r\nexport type userType = {\r\n    id: number\r\n    photos: {\r\n        small: string\r\n    }\r\n    followed: boolean\r\n    name: string\r\n    status: string\r\n}\r\nexport type InitialStateType = typeof initialState\r\n\r\nlet initialState = {\r\n    users: [] as Array<userType>,\r\n    pageSize: 5,\r\n    totalUsersCount: 0,\r\n    currentPage: 1,\r\n    isFetching: true,\r\n    followingInProgress: [] as Array<number>\r\n}\r\n\r\n\r\nexport const userReducer = (state: InitialStateType = initialState, action: ActionTypes): InitialStateType => {\r\n    switch (action.type) {\r\n        case FOLLOW:\r\n            let newUsers: userType[]=updateObjectInArray(state.users,action.userID, 'id',{followed: true})\r\n           return {...state,\r\n               users: newUsers }\r\n        case UN_FOLLOW:\r\n            return {...state,\r\n                users: updateObjectInArray(state.users,action.userID, 'id',{followed: false}) }\r\n        case SET_USERS:\r\n            return {\r\n                ...state,\r\n                users: action.users\r\n            }\r\n        case SET_CURRENT_PAGES:\r\n            return {...state, currentPage: action.currentPage}\r\n        case SET_TOTAL_USERS_COUNT:\r\n            return {...state, totalUsersCount: action.count}\r\n        case TOGGLE_IS_FETCHING:\r\n            return {...state, isFetching: action.isFetching}\r\n        case TOGGLE_IS_FOLLOWING_PROGRESS:\r\n            return {\r\n                ...state,\r\n                followingInProgress: action.isFetching ?\r\n                    [...state.followingInProgress, action.userID]\r\n                    : [...state.followingInProgress.filter(id => id !== action.userID)]\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n};\r\n\r\n\r\nexport type ActionTypes =\r\n    ReturnType<typeof followSuccess>\r\n    | ReturnType<typeof unFollowSuccess>\r\n    | ReturnType<typeof setUsers>\r\n    | ReturnType<typeof setCurrentPages>\r\n    | ReturnType<typeof setTotalUsersCount>\r\n    | ReturnType<typeof setTotalUsersCount>\r\n    | ReturnType<typeof setToggleIsFetching>\r\n    | ReturnType<typeof setToggleFollowingProgress>\r\n\r\n\r\nexport const followSuccess = (userID: number) => ({type: FOLLOW, userID}) as const\r\nexport const unFollowSuccess = (userID: number) => ({type: UN_FOLLOW, userID}) as const\r\nexport const setUsers = (users: Array<userType>) => ({type: SET_USERS, users}) as const\r\nexport const setCurrentPages = (currentPage: number) => ({type: SET_CURRENT_PAGES, currentPage}) as const\r\nexport const setTotalUsersCount = (totalUsersCount: number) => ({\r\n    type: SET_TOTAL_USERS_COUNT,\r\n    count: totalUsersCount\r\n}) as const\r\nexport const setToggleIsFetching = (isFetching: boolean) => ({type: TOGGLE_IS_FETCHING, isFetching}) as const\r\nexport const setToggleFollowingProgress = (isFetching: boolean, userID: number) => ({\r\n    type: TOGGLE_IS_FOLLOWING_PROGRESS,\r\n    isFetching,\r\n    userID\r\n}) as const\r\n\r\nexport const requestUsers = (page: number, pageSize: number): ThunkAction<Promise<void>, InitialStateType, unknown, ActionTypes> => async (dispatch: Dispatch<ActionTypes>) => {\r\n    dispatch(setToggleIsFetching(true));\r\n    dispatch(setCurrentPages(page))\r\n\r\n    let data = await usersAPI.getUsers(page, pageSize)\r\n    dispatch(setToggleIsFetching(false));\r\n    dispatch(setUsers(data.items));\r\n    dispatch(setTotalUsersCount(data.totalCount))\r\n}\r\n\r\ntype ObjectType ={\r\n    dispatch: Dispatch<ActionTypes>,\r\n    userID: number,\r\n    ApiMethod: (userID:number)=>Promise<AxiosResponse>\r\n    AC: typeof followSuccess | typeof unFollowSuccess\r\n}\r\n\r\nexport const followUnfollow = async ({dispatch, userID, ApiMethod,AC} :ObjectType) => {\r\n    dispatch(setToggleFollowingProgress(true, userID));\r\n    let response = await ApiMethod(userID)\r\n    if (response.data.resultCode === 0) {\r\n        dispatch(AC(userID))\r\n    }\r\n    dispatch(setToggleFollowingProgress(false, userID))\r\n}\r\n\r\nexport const follow = (userID: number) => async (dispatch: Dispatch<ActionTypes>) => {\r\n    let ApiMethod = usersAPI.follow.bind(userID)\r\n    let AC = followSuccess;\r\n    await followUnfollow({dispatch, userID, ApiMethod, AC})\r\n}\r\nexport const unFollow = (userID: number): ThunkType => async (dispatch) => {\r\n    let ApiMethod = usersAPI.unfollow.bind(userID);\r\n    let AC = unFollowSuccess;\r\n    await followUnfollow({dispatch, userID, ApiMethod, AC})\r\n}\r\n\r\nexport type ThunkType = ThunkAction<Promise<void>, InitialStateType, unknown, ActionTypes>\r\n\r\n","export default __webpack_public_path__ + \"static/media/user.eeb99f43.jpg\";","import React from 'react';\r\nimport {NavLink} from \"react-router-dom\";\r\nimport userPhoto from \"../../assets/image/user.jpg\";\r\nimport s from \"./Users.module.css\";\r\nimport {userType} from \"../../redux/User-reducer\";\r\n\r\ntype propsType={\r\n    user:userType\r\n    unfollow: (userID: number) => void\r\n    follow: (userID: number) => void\r\n    followingInProgress : Array<number>\r\n}\r\n\r\nconst User = ({user,unfollow, follow ,followingInProgress}:propsType) => {\r\n    return (\r\n        <div>\r\n            <span>\r\n                        <div>\r\n                            <NavLink to={'/profile/'+user.id}>\r\n                                <img src={user.photos.small != null ? user.photos.small : userPhoto} className={s.photo}\r\n                                     alt={\"small Avatar\"}/>\r\n                            </NavLink>\r\n                        </div>\r\n                        <div>\r\n                            {user.followed ?\r\n                                <button disabled={followingInProgress.some(id=> id === user.id)}\r\n                                        onClick={() => {unfollow(user.id)} }> UnFollow</button> :\r\n                                <button  disabled={followingInProgress.some(id=> id === user.id)}\r\n                                         onClick={() => {follow(user.id)}}>Follow</button>}\r\n                        </div>\r\n                    </span>\r\n            <span>\r\n                        <span>\r\n                            <div>{user.name}</div>\r\n                            <div>{user.status}</div>\r\n                        </span>\r\n                        <span>\r\n                            <div>{\"u.location.country\"}</div>\r\n                            <div>{\"u.location.city\"}</div>\r\n                        </span>\r\n                    </span>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default User;","import React from 'react';\r\nimport {userType} from \"../../redux/User-reducer\";\r\nimport User from \"./User\";\r\n\r\n\r\ntype propsType = {\r\n    users: Array<userType>\r\n    onPageChanged: (pageNumber: number) => void\r\n    unfollow: (userID: number) => void\r\n    follow: (userID: number) => void\r\n    followingInProgress : Array<number>\r\n\r\n}\r\nconst Users = ({unfollow,follow,followingInProgress, users}: propsType) => {\r\n\r\n    return (<div>\r\n            {users.map(u => <User key={u.id}\r\n                                           user={u}\r\n                                           unfollow={unfollow}\r\n                                           follow={follow}\r\n                                           followingInProgress={followingInProgress} />)\r\n            }\r\n        </div>\r\n    );\r\n};\r\nexport default Users;","export default __webpack_public_path__ + \"static/media/loading.2a7196e9.gif\";","import React from 'react';\r\nimport loading from \"../../assets/image/loading.gif\"\r\n\r\nconst Preloader = (props: any) => {\r\n    return (\r\n        <div>\r\n            <img src={loading} alt={\"loading...please, wait\"}/>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Preloader;","import {AppStateType} from \"./redux-store\";\r\n\r\nexport const getUsers =(state: AppStateType)=>{\r\n    return state.users\r\n}\r\n\r\n//export const getUsersSuperSelector= createSelector(getUsers,getIsFetching, (users,isFetching)=> users.filter(u=>true) )\r\nexport const getPageSize =(state: AppStateType)=>{\r\n    return state.users.pageSize\r\n}\r\n\r\nexport const getTotalUsersCount =(state: AppStateType)=>{\r\n    return state.users.totalUsersCount\r\n}\r\nexport const getCurrentPage =(state: AppStateType)=>{\r\n    return state.users.currentPage\r\n}\r\nexport const getIsFetching =(state: AppStateType)=>{\r\n    return state.users.isFetching\r\n}\r\nexport const getFollowingInProgress =(state: AppStateType)=>{\r\n    return state.users.followingInProgress\r\n}\r\n\r\n/*\r\n    isFetching: state.users.isFetching,\r\n    followingInProgress:  state.users.followingInProgress*/\r\n","import React, {useState} from 'react';\r\nimport {v1} from \"uuid\";\r\nimport s from \"./Pagenator.module.css\";\r\n\r\ntype propsType = {\r\n    totalItemsCount: number\r\n    pageSize: number\r\n    currentPage: number\r\n    onPageChanged: (pageNumber: number) => void\r\n    portionSize?: number\r\n}\r\n\r\nexport const Pagenator = ({totalItemsCount, pageSize, currentPage, onPageChanged, portionSize = 10}: propsType) => {\r\n    let pagesCount = Math.ceil(totalItemsCount / pageSize)\r\n    let pages = [];\r\n\r\n    for (let i = 1; i < pagesCount; i++) {\r\n        pages.push(i);\r\n    }\r\n    let portionCount = Math.ceil(pagesCount / portionSize)\r\n    const [portionNumber, setPortionNumber] = useState(1)\r\n    let leftPortionNumber = (portionNumber - 1) * portionSize + 1\r\n    let rightPortionNumber = portionNumber * portionSize\r\n\r\n    let prevDisabledCondition = portionNumber < 2\r\n    let nextDisabledCondition = portionCount < portionNumber\r\n\r\n    return (\r\n        <div className={s.paginator}>\r\n            <button onClick={() => setPortionNumber(portionNumber - 1)}\r\n                    className={prevDisabledCondition ? s.bottomDisabled:'' } disabled={prevDisabledCondition}> PREV </button>\r\n            {\r\n                pages.filter(p => p >= leftPortionNumber && p <= rightPortionNumber)\r\n                    .map(p => <span key={v1()} className={currentPage === p ? `${s.page} ${s.selectedPage}`: s.page}\r\n                                    onClick={() => {\r\n                                        onPageChanged(p)\r\n                                    }}>\r\n                        {p} </span>)\r\n            }\r\n            <button onClick={() => setPortionNumber(portionNumber + 1)}\r\n                    className={nextDisabledCondition ? s.bottomDisabled:'' } disabled={nextDisabledCondition}> NEXT </button>\r\n        </div>\r\n    );\r\n};\r\n\r\n","import React from 'react';\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {\r\n    followSuccess,\r\n    unFollowSuccess,\r\n    InitialStateType,\r\n    setCurrentPages, setToggleFollowingProgress,\r\n    userType, requestUsers,\r\n} from \"../../redux/User-reducer\";\r\n\r\nimport Users from \"./Users\";\r\nimport Preloader from \"../common/Preloader\";\r\nimport {compose} from \"redux\";\r\nimport {\r\n    getCurrentPage,\r\n    getFollowingInProgress,\r\n    getIsFetching,\r\n    getPageSize,\r\n    getTotalUsersCount,\r\n    getUsers\r\n} from \"../../redux/users-selectors\";\r\nimport {Pagenator} from \"../common/Pagenator/Pagenator\";\r\n\r\n\r\n\r\ntype MapStatePropsType={\r\n    usersPage: InitialStateType\r\n    pageSize: number\r\n    totalUsersCount: number\r\n    currentPage: number\r\n    isFetching: boolean\r\n    followingInProgress: Array<number>\r\n}\r\nexport type mapDispatchToPropsType={\r\n    acceptFollow: (userID: number) =>void\r\n    acceptUnFollow: (userID: number) => void\r\n    setCurrentPages: (pageNumber: number)=>void\r\n    setToggleFollowingProgress: (followingInProgress: boolean, userID: number)=> void\r\n    requestUsers: (currentPage: number, pageSize: number)=> void\r\n}\r\nexport type UsersPropsType = MapStatePropsType & mapDispatchToPropsType\r\nexport  type dataType = {\r\n    error: string\r\n    items : Array<userType>\r\n    totalCount: number\r\n}\r\n\r\nclass UsersAPIComponent extends React.Component <UsersPropsType> {\r\n    componentDidMount() {\r\n        let {currentPage, pageSize} = this.props\r\n        this.props.requestUsers(currentPage, pageSize);\r\n    }\r\n\r\n    onPageChanged = (pageNumber: number) => {\r\n        let {pageSize} = this.props\r\n        this.props.requestUsers(pageNumber,pageSize);\r\n    }\r\n\r\n    render() {\r\n        return <>\r\n            {this.props.isFetching ? <Preloader/>: null}\r\n            <Pagenator totalItemsCount={this.props.usersPage.totalUsersCount}\r\n                       pageSize={this.props.usersPage.pageSize}\r\n                       currentPage={this.props.currentPage}\r\n                       onPageChanged={this.onPageChanged} />\r\n            <Users\r\n            users={this.props.usersPage.users}\r\n            onPageChanged={this.onPageChanged}\r\n            unfollow={this.props.acceptUnFollow}\r\n            follow={this.props.acceptFollow}\r\n            followingInProgress ={this.props.followingInProgress}\r\n        />\r\n        </>\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType):MapStatePropsType  => {\r\n    return {\r\n        usersPage: getUsers(state),\r\n        pageSize: getPageSize(state),\r\n        totalUsersCount: getTotalUsersCount(state),\r\n        currentPage: getCurrentPage(state),\r\n        isFetching: getIsFetching(state),\r\n        followingInProgress: getFollowingInProgress(state)\r\n    }\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps,  {\r\n        acceptUnFollow: unFollowSuccess,\r\n        acceptFollow: followSuccess,\r\n        setCurrentPages,\r\n        setToggleFollowingProgress,\r\n        requestUsers,\r\n    }))(UsersAPIComponent)\r\n","import React from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport classes from './Header.module.css'\r\nimport {AuthPropsType} from \"./HeaderContainer\";\r\n\r\n\r\n\r\nconst Header =(props:AuthPropsType) =>{\r\n    return(\r\n        <header className={classes.header}>\r\n            <img src=\"https://web.getmonero.org/press-kit/symbols/monero-symbol-480.png\"\r\n                 alt={'logo'}/>\r\n            <div className={classes.loginBlock}>\r\n                {props.isAuth\r\n                    ? <div>{props.login} <button onClick={props.logout}>Log out</button></div>\r\n                    : <NavLink to={'/login'}> Login </NavLink>}\r\n            </div>\r\n        </header>\r\n    )\r\n}\r\nexport default Header;","import React from \"react\";\r\nimport Header from \"./Header\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {getAuthUserData, logout} from \"../../redux/Auth-reduser\";\r\n\r\n\r\nexport type  MapStatePropsType ={\r\n    id: number| null,\r\n    email: string| null,\r\n    login: string| null,\r\n    isAuth: boolean\r\n}\r\ntype MapDispatchPropsType ={\r\n    getAuthUserData:()=>void\r\n    logout:()=>void\r\n}\r\nexport type AuthPropsType = MapStatePropsType & MapDispatchPropsType\r\n\r\nclass HeaderContainer extends React.Component<AuthPropsType> {\r\n  /*  componentDidMount() {\r\n       this.props.getAuthUserData();\r\n    }*/\r\n\r\n    render() {\r\n        return (\r\n           <Header {...this.props} />\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n    return {\r\n        id: state.auth.userId,\r\n        email: state.auth.email,\r\n        login: state.auth.login,\r\n        isAuth:state.auth.isAuth}\r\n\r\n}\r\n\r\nexport default  connect(mapStateToProps,{getAuthUserData,logout})(HeaderContainer);","import React from \"react\";\r\nimport s from './FormControle.module.css'\r\nimport {FieldValidatorType} from \"../../../utilits/valid\";\r\nimport {Field, WrappedFieldMetaProps, WrappedFieldProps} from \"redux-form\";\r\nimport {LoginFormvaluesType} from \"../../Login/Login\";\r\n\r\n\r\ntype FormControlType = {\r\n    meta: WrappedFieldMetaProps\r\n}\r\n\r\nexport const FormControl: React.FC<FormControlType> = ({meta: {touched, error}, children}) => {\r\n    const hasError = touched && error;\r\n    return (<div className={hasError ? `${s.formControl} ${s.error}` : `${s.formControl}`}>\r\n            <div>\r\n                {children}\r\n            </div>\r\n            {hasError && <span>ERROR</span>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const TextArea: React.FC<WrappedFieldProps> = (props) => {\r\n    const {input, meta, ...restProps} = props;\r\n    return (<FormControl {...props}>\r\n            <textarea {...input} {...restProps}/>\r\n        </FormControl>\r\n    )\r\n}\r\n\r\nexport const Input: React.FC<WrappedFieldProps> = (props) => {\r\n    const {input, meta, ...restProps} = props;\r\n    return (\r\n        <FormControl {...props}>\r\n            <input {...input} {...restProps}/>\r\n        </FormControl>\r\n\r\n    )\r\n}\r\n\r\nexport function createField(placeholder: string| undefined,\r\n                            name: LoginFormvaluesType,\r\n                            validators: Array<FieldValidatorType>,\r\n                            component: string | React.FC<WrappedFieldProps>,\r\n                            props = {}, text: string = \" \"){\r\n    return (<div>\r\n        <Field component={component}\r\n               placeholder={placeholder}\r\n               name={name}\r\n               validate={validators}\r\n               {...props}/>{text}\r\n    </div>)\r\n}","export type FieldValidatorType= (value:string)=> string| undefined\r\n\r\nexport const RequiredField: FieldValidatorType = (value) =>{\r\n    return value? undefined:   \"Fild is requert\";\r\n}\r\nexport  const MaxLenghtCreator =(maxLength: number):FieldValidatorType=>(value)=>{\r\n    return (value && value.length > maxLength)? 'Max lenght is 30 symbols':   undefined;\r\n}\r\n\r\n","import React from 'react';\r\nimport {InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {createField, Input} from \"../common/formControls/formControls\";\r\nimport {RequiredField} from \"../../utilits/valid\";\r\nimport s from '../common/formControls/FormControle.module.css'\r\nimport {FormDataType} from \"./Login\";\r\n\r\n\r\nexport type forCapchaType = {\r\n    captcha?: boolean\r\n}\r\n\r\nexport const LoginForm: React.FC<InjectedFormProps<FormDataType, forCapchaType> & forCapchaType> =\r\n    ({handleSubmit, error}) => {\r\n        return (\r\n            <form onSubmit={handleSubmit}>\r\n                {createField('email', 'email', [RequiredField], Input)}\r\n                {createField('password', 'password', [RequiredField], Input, {type: \"password\"})}\r\n                {createField(\"checkbox\", 'rememberMe', [], Input, {text: 'remember me', type: \"checkbox\"})}\r\n                {error && <div className={s.formSMRError}>\r\n                    {error}\r\n                </div>}\r\n                <div>\r\n                    <button>Login</button>\r\n                </div>\r\n            </form>\r\n        )\r\n    };\r\n\r\n\r\nexport const LoginReduxForm = reduxForm<FormDataType, forCapchaType>({\r\n    form: 'login'\r\n})(LoginForm)\r\n","\r\nimport React from 'react';\r\nimport {LoginReduxForm} from \"./LoginForm\";\r\nimport {connect} from \"react-redux\";\r\nimport {login} from \"../../redux/Auth-reduser\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\n\r\n\r\ntype mapStateToPropsType = {\r\n    isAuth: boolean\r\n}\r\n\r\ntype mapDispatchPropsType={\r\n    login:(email:string, password:string, rememberMe:boolean)=>void\r\n}\r\nexport type FormDataType={\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n}\r\n\r\nexport type LoginFormvaluesType = keyof FormDataType\r\n\r\nconst Login: React.FC<mapStateToPropsType & mapDispatchPropsType> = (props) => {\r\n    const  onSubmit=(formData: FormDataType)=>{\r\n        props.login(formData.email, formData.password, formData.rememberMe)\r\n    }\r\n\r\n    if (props.isAuth){\r\n        return <Redirect to={\"/profile\"}/>\r\n    }\r\n    return (\r\n        <div>\r\n            <h1>LOGIN</h1>\r\n            <LoginReduxForm onSubmit={onSubmit}/>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst mapStateToProps= (state:AppStateType):mapStateToPropsType=>({\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\nexport default connect(mapStateToProps,{login})(Login);","import {getAuthUserData} from \"./Auth-reduser\";\r\nimport {AppThunk} from \"./redux-store\";\r\n\r\nexport const INITIALIZE_SUCCESS = 'appReducer/INITIALIZE_SUCCESS'\r\n\r\nconst initialState:InitialStateType  ={\r\n    initialized: false\r\n}\r\nexport type InitialStateType = {\r\n    initialized: boolean\r\n}\r\nexport type initializeAT= {\r\n    type: 'appReducer/INITIALIZE_SUCCESS'\r\n}\r\n export type initialActionTypes= initializeAT\r\n\r\n\r\nexport const appReducer = (state: InitialStateType = initialState, action: initialActionTypes): InitialStateType => {\r\n    switch (action.type) {\r\n        case INITIALIZE_SUCCESS:\r\n            return {\r\n                ...state,\r\n                initialized: true,\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n};\r\n\r\n\r\nexport const initializeAC = () => ({type: INITIALIZE_SUCCESS}) as const\r\n\r\nexport const initializeApp = ():AppThunk  =>(dispatch) => {\r\n   let promise = dispatch(getAuthUserData())\r\n   Promise.all([promise])\r\n       .then(()=>{dispatch(initializeAC())})\r\n}\r\n","import {ActionTypes} from \"./redux-store\";\r\nimport {ProfileAPI, usersAPI} from \"../API/Api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {ResultCodesEnum} from \"./Auth-reduser\";\r\n\r\nconst ADD_POST = 'ADD-POST'\r\nconst SET_USER_PROFILE = \"SET_USER_PROFILE\";\r\nconst SET_STATUS = \"SET_STATUS \";\r\nconst DELETE_POST= \"DELETE-POST\"\r\n\r\nexport type postType = {\r\n    id: number\r\n    content: string\r\n    likescount: number\r\n}\r\nexport type profileType = {\r\n    contacts: {\r\n        facebook: string\r\n        website: string\r\n        vk: string\r\n        twitter: string\r\n        instagram?: string\r\n        youtube?: string\r\n        github?: string\r\n        mainLink?: string}\r\n    lookingForAJob: boolean\r\n    lookingForAJobDescription?: string\r\n    fullName: string\r\n        userId: number\r\n    photos: {\r\n        small?: string\r\n        URL?: string| null\r\n        large?: string }\r\n}\r\nexport type InitialStateType = typeof initialState\r\nlet initialState = {\r\n    posts: [\r\n        {id: 1, content: 'Hi? how are you?', likescount: 3},\r\n        {id: 2, content: 'It\\'s my first  post', likescount: 11},\r\n        {id: 3, content: 'lalala', likescount: 0},\r\n    ] as Array<postType>,\r\n    /*newPostText: \"\",*/\r\n    profile:{} as profileType,\r\n    status:\"\"\r\n}\r\n\r\n\r\nexport const profileReducer = (state: InitialStateType = initialState, action: ActionTypes): InitialStateType => {\r\n    switch (action.type) {\r\n        case ADD_POST:\r\n            let newPost: postType = {\r\n                id: 15,\r\n                content: action.newPostBody,\r\n                likescount: 0\r\n            };\r\n            return {\r\n                    ...state,\r\n                    posts: [...state.posts, newPost],\r\n                    /*newPostText: \"\"*/\r\n            }\r\n        /*case UPDATE_NEW_POST_TEXT:\r\n                return {...state,\r\n                        newPostText: action.newPostText};*/\r\n        case SET_USER_PROFILE:\r\n            return {...state, profile: action.profile}\r\n        case SET_STATUS:\r\n            return {...state, status: action.status}\r\n        case DELETE_POST:\r\n            let copy ={...state}\r\n            let FilteredPosts= copy.posts.filter((p)=> p.id !== action.id ? p: '')\r\n            return   {...copy, posts: FilteredPosts}\r\n        default:\r\n            return state;\r\n        }\r\n    };\r\n    export const addPost = (newPostBody: string) => ({type: ADD_POST, newPostBody}) as const\r\n  /*  export const UpdateNewPostTextAC = (text: string) => ({type: UPDATE_NEW_POST_TEXT, newPostText: text}) as const*/\r\n   export const setUserProfile =(profile: profileType)=> ({type: SET_USER_PROFILE, profile }) as const\r\nexport const setStatus = (status: string)=> ({type: SET_STATUS, status}) as const\r\nexport const deletePost = (id: number)=> ({type: DELETE_POST, id}) as const\r\n\r\nexport type getProfileResponseType={\r\n\r\n    resultCode: ResultCodesEnum\r\n    data: profileType\r\n\r\n}\r\n\r\nexport const getUserProfile =(userId: number)=>async (dispatch: Dispatch<ActionTypes>)=>{\r\n        let response = await  usersAPI.getProfile(userId)\r\n           dispatch(setUserProfile(response.data));\r\n}\r\nexport const getStatus =(userId: number)=> async (dispatch: Dispatch<ActionTypes>)=>{\r\n    let response = await  ProfileAPI.getStatus(userId)\r\n            dispatch(setStatus(response.data));\r\n}\r\nexport const updateStatus =(status: string)=>async (dispatch: Dispatch<ActionTypes>)=>{\r\n    let response= await ProfileAPI.updateStatus(status)\r\n            if(response.data.resultCode===0){\r\n            dispatch(setStatus(status));}\r\n}","import {ActionTypes} from \"./redux-store\";\r\n\r\nconst ADD_MESSAGE = \"dialogReducer/ADD-MESSAGE\";\r\n/*const UPDATE_NEW_MESSAGE_TEXT = 'UPDATE-NEW-MESSAGE-TEXT';*/\r\n\r\n/*export type dialogPageType = {\r\n    dialogs: Array<dialogsType>\r\n    messages: Array<messagesType>\r\n    newMessageText: string\r\n}*/\r\nexport type dialogsType = {\r\n    id: number\r\n    name: string\r\n    avatar: string\r\n}\r\nexport type messagesType = {\r\n    id: number\r\n    content: string\r\n}\r\n\r\n\r\nlet initialState = {\r\n    dialogs: [\r\n        {\r\n            id: 1,\r\n            name: 'Dima',\r\n            avatar: \"http://thepeoplesmovies.files.wordpress.com/2009/10/avatar1.jpg\"\r\n        },\r\n        {\r\n            id: 2,\r\n            name: 'Lena',\r\n            avatar: \"http://thepeoplesmovies.files.wordpress.com/2009/10/avatar1.jpg\"\r\n        },\r\n        {\r\n            id: 3,\r\n            name: 'Max',\r\n            avatar: \"http://thepeoplesmovies.files.wordpress.com/2009/10/avatar1.jpg\"\r\n        },\r\n    ] as Array<dialogsType>,\r\n    messages: [\r\n        {id: 1, content: \"hi1\"},\r\n        {id: 2, content: \"hi2\"},\r\n        {id: 3, content: \"hi3\"},\r\n    ] as Array<messagesType>,\r\n    newMessageText: \"\" ,\r\n}\r\nexport type InitialStateType = typeof initialState\r\n\r\n\r\nexport const dialogReducer = (state: InitialStateType = initialState, action: ActionTypes): InitialStateType => {\r\n\r\n    switch (action.type) {\r\n        /*case UPDATE_NEW_MESSAGE_TEXT:\r\n            return {...state,\r\n                newMessageText: action.newMessageText};*/\r\n\r\n        case ADD_MESSAGE:\r\n            let newMessage = action.newMessageBody\r\n            return {\r\n                ...state,\r\n                messages: [...state.messages,{id: 100, content: newMessage}]\r\n            }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const AddMessageAC = (newMessageBody: string) => ({type: ADD_MESSAGE, newMessageBody}) as const\r\n/*\r\nexport const UpdateNewMessageTextAC = (text: string) => (\r\n    {type: UPDATE_NEW_MESSAGE_TEXT, newMessageText: text}) as const*/\r\n","import {ActionTypes} from \"./redux-store\";\r\n\r\nexport type friendType = {\r\n    id: number\r\n    name: string\r\n    avatar: string\r\n}\r\nexport type InitialStateType =typeof initialState\r\n\r\nlet initialState ={\r\n    friends: [\r\n        {\r\n            id: 1,\r\n            name: \"Masha\",\r\n            avatar: 'http://thepeoplesmovies.files.wordpress.com/2009/10/avatar1.jpg'\r\n        },\r\n        {\r\n            id: 2,\r\n            name: \"Sasha\",\r\n            avatar: 'http://thepeoplesmovies.files.wordpress.com/2009/10/avatar1.jpg'\r\n        },\r\n        {\r\n            id: 3,\r\n            name: \"Misha\",\r\n            avatar: 'http://thepeoplesmovies.files.wordpress.com/2009/10/avatar1.jpg'\r\n        },\r\n    ] as Array<friendType>\r\n}\r\n\r\n\r\nexport const navbarReducer =(state: InitialStateType = initialState , action:ActionTypes):InitialStateType =>{\r\n    return state;\r\n}","import {applyMiddleware, combineReducers, compose, createStore} from \"redux\";\r\nimport {addPost, deletePost, profileReducer, setStatus, setUserProfile} from \"./Profile-reducer\";\r\nimport {AddMessageAC, dialogReducer} from \"./Dialog-reducer\";\r\nimport {navbarReducer} from \"./Navbar-reducer\";\r\nimport {userReducer} from \"./User-reducer\";\r\nimport {AuthActionTypes, authReducer} from \"./Auth-reduser\";\r\nimport thunkMiddleware, {ThunkAction} from \"redux-thunk\";\r\nimport { reducer as formReducer } from 'redux-form'\r\nimport {appReducer, initialActionTypes} from \"./App-reduser\";\r\n\r\n\r\nexport type ActionTypes = ReturnType<typeof addPost> |\r\n    ReturnType<typeof AddMessageAC> |\r\n    ReturnType<typeof setUserProfile>|\r\n    ReturnType<typeof setStatus> | ReturnType<typeof deletePost>\r\n\r\nlet rootReducer = combineReducers({\r\n    profilePage: profileReducer,\r\n    dialogPage: dialogReducer,\r\n    navbarBlock: navbarReducer,\r\n    users: userReducer,\r\n    auth: authReducer,\r\n    form: formReducer,\r\n    app: appReducer\r\n});\r\n\r\n// @ts-ignore\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nconst store = createStore(rootReducer, composeEnhancers(applyMiddleware(thunkMiddleware)));\r\n\r\n\r\nexport type AppStateType = ReturnType<typeof rootReducer>\r\n//let store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\r\nexport default store;\r\n\r\nexport type RootActionTypes = ActionTypes| AuthActionTypes |initialActionTypes\r\nexport type AppThunk= ThunkAction<void, AppStateType, unknown, RootActionTypes>\r\n\r\n\r\n// @ts-ignore\r\nwindow._store_ =store","import React from \"react\";\r\nimport s from \"./DialogItem.module.css\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {dialogsType} from \"../../../redux/Dialog-reducer\";\r\n\r\n\r\nconst DialogItem = (props:dialogsType) => {\r\n    let path = '/dialogs/' + props.id;\r\n    return (\r\n        <div className={s.dialog + ' ' + s.active}>\r\n            <img src={props.avatar}  alt='avatar'  />\r\n            <NavLink to={path}>{props.name}</NavLink>\r\n        </div>\r\n    )\r\n}\r\nexport default DialogItem","import React from \"react\";\r\nimport s from \"./Message.module.css\";\r\nimport {messagesType} from \"../../../redux/Dialog-reducer\";\r\n\r\n\r\n\r\n\r\nconst Massage = (props:messagesType) => {\r\n\r\n    return (\r\n        <div>\r\n            <div className={s.massage}>{props.content}</div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Massage;","import React from \"react\";\r\nimport s from \"./Dialogs.module.css\";\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport Massage from \"./Message/Message\";\r\nimport { dialogsType, messagesType} from \"../../redux/Dialog-reducer\";\r\nimport {dialogPageType} from \"./DialogsContainer\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {TextArea} from \"../common/formControls/formControls\";\r\nimport {MaxLenghtCreator, RequiredField} from \"../../utilits/valid\";\r\n\r\n\r\n\r\n\r\nconst Dialogs = (props:dialogPageType) => {\r\n\r\n    let state= props.dialogPage;\r\n\r\n    let dialogElements =\r\n        state.dialogs.map((d: dialogsType) => <DialogItem id={d.id} key={d.id}  name={d.name}\r\n                                                                avatar={d.avatar}/>);\r\n    let massagesElements =\r\n        state.messages.map((m: messagesType) => <Massage  id={m.id} key={m.id}  content={m.content}/>);\r\n\r\n    const  addNewMessage=(values: FormMassageType)=>{\r\n        props.addMessage(values.newMessageBody)\r\n        console.log(values.newMessageBody)\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n            <div className={s.dialogs}>\r\n                <div className={s.dialogsItems}>\r\n                    {dialogElements}\r\n                </div>\r\n                <div className={s.massages}>\r\n                    {massagesElements}\r\n                </div>\r\n            </div>\r\n            <AddMessageFormReduxForm onSubmit={addNewMessage}\r\n            />\r\n        </>\r\n    )\r\n}\r\n\r\ntype FormMassageType ={\r\n    newMessageBody: string\r\n}\r\nconst maxLength = MaxLenghtCreator(50);\r\n\r\nconst AddMessageForm = (props: InjectedFormProps<FormMassageType>) =>{\r\n    return (\r\n        <form className={s.styleSendMessage} onSubmit={props.handleSubmit}>\r\n            <Field component={TextArea}\r\n                   name={'newMessageBody'}\r\n                   placeholder={'Enter your message'}\r\n            validate={[RequiredField,maxLength]}/>\r\n            <br/>\r\n            <button className={s.button}>Send Message</button>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport const AddMessageFormReduxForm = reduxForm<FormMassageType>({\r\n    form: 'message'\r\n})(AddMessageForm )\r\n\r\nexport default Dialogs;","import React from \"react\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {AppStateType} from \"../redux/redux-store\";\r\nimport {connect} from \"react-redux\";\r\n\r\n\r\n\r\nexport type mapStateToPropsForRedirectType={\r\n    isAuth: boolean\r\n}\r\n\r\nlet mapStateToPropsForRedirect = (state:AppStateType ): mapStateToPropsForRedirectType => {\r\n    return {isAuth: state.auth.isAuth}\r\n}\r\n\r\nexport function withAuthRedirect<T>(Component: React.ComponentType<T>) {\r\n\r\nconst RedirectComponent =(props:mapStateToPropsForRedirectType)=>{\r\n    let {isAuth, ...restProps} =props\r\n            if (!isAuth) return <Redirect to= {\"/login\"} />\r\n            return <Component {...restProps as T}/>\r\n    }\r\n    return connect(mapStateToPropsForRedirect )(RedirectComponent);\r\n    }","import {\r\n    AddMessageAC,\r\n    InitialStateType,\r\n} from \"../../redux/Dialog-reducer\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {compose, Dispatch} from \"redux\";\r\nimport React from \"react\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport {withSuspense} from \"../../hoc/withSuspense\";\r\n\r\n\r\n\r\n\r\ntype MapStatePropsType={\r\n    dialogPage: InitialStateType\r\n}\r\ntype mapDispatchToPropsType={\r\n    /*updateNewMessageText: (text:string)=> void*/\r\n    addMessage: (newMessageBody:string)=> void\r\n    }\r\n\r\n\r\nexport type dialogPageType = MapStatePropsType & mapDispatchToPropsType\r\n\r\nconst mapStateToProps =(state:AppStateType):MapStatePropsType => {\r\n    return {\r\n        dialogPage: state.dialogPage,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps =(dispatch:Dispatch): mapDispatchToPropsType=>{\r\n    return{\r\n        /*updateNewMessageText: (text:string)=> {\r\n            dispatch(UpdateNewMessageTextAC(text));\r\n        },*/\r\n        addMessage: (newMessageBody:string)=>{\r\n            dispatch(AddMessageAC(newMessageBody));\r\n        }\r\n    }\r\n}\r\n\r\nexport default compose<React.ComponentType>(connect(mapStateToProps, mapDispatchToProps), withAuthRedirect)(Dialogs);","import React, {ChangeEvent, useEffect, useState} from 'react';\r\n\r\ntype propsType={\r\n    status: string\r\n    updateStatus: (status: string)=> void\r\n}\r\n\r\n export const ProfileStatusWithHooks = (props:propsType ) => {\r\n\r\n     const [editMode, setEditMode] = useState<boolean>(false)\r\n     const [status, setStatus] = useState<string>(props.status)\r\n\r\n     useEffect(()=>{\r\n         setStatus(props.status)\r\n     },[props.status])\r\n\r\n     const ActiveMode=()=>{\r\n         setEditMode(true)\r\n     }\r\n     const DeactiveMode=()=>{\r\n         setEditMode(false)\r\n         props.updateStatus(status);\r\n     }\r\n\r\n     const onStatusChange=(e:ChangeEvent<HTMLInputElement>)=>{\r\n        setStatus( e.currentTarget.value)\r\n     }\r\n\r\n    return (\r\n        <div>\r\n            {!editMode &&\r\n            <div>\r\n                <span onDoubleClick={ActiveMode}> {status || '----'} </span>\r\n            </div>}\r\n            {editMode && <div>\r\n                <input onBlur={DeactiveMode} onChange={onStatusChange}\r\n                    autoFocus={true} value={status}/>\r\n            </div>\r\n            }\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ProfileStatusWithHooks;\r\n\r\n","import React from \"react\";\r\nimport classes from './ProfileInfo.module.css'\r\nimport Preloader from \"../../common/Preloader\";\r\nimport Ava from \"../../../assets/image/user.jpg\";\r\nimport {profileType} from \"../../../redux/Profile-reducer\";\r\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHooks\";\r\n\r\ntype propsType = {\r\n    profile: profileType\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\nconst ProfileInfo = ({profile, status, updateStatus}: propsType) => {\r\n\r\n    if (!profile.userId) {\r\n        return <Preloader/>\r\n    }\r\n    return (\r\n        <div>\r\n            <div className={classes.descriptionBlock}>\r\n                <img src={profile.photos.large ? profile.photos.large : Ava} alt={\"large Avatar\"}/>\r\n                <ProfileStatusWithHooks status={status} updateStatus={updateStatus}/>\r\n            </div>\r\n        </div>\r\n\r\n    );\r\n}\r\nexport default ProfileInfo;","import React from \"react\";\r\nimport classes from './Post.module.css'\r\nimport {postType} from \"../../../../redux/Profile-reducer\";\r\n\r\n\r\nconst Post = (props:postType) => {\r\n    return (\r\n        <div className={classes.post}>\r\n            <div className={classes.item}>\r\n                <img src=\"http://thepeoplesmovies.files.wordpress.com/2009/10/avatar1.jpg\" alt=\"avatar1\"/>\r\n                {props.content}\r\n                <br/><span> Likes </span>{props.likescount}\r\n            </div>\r\n        </div>)\r\n}\r\nexport default Post;","import React from \"react\";\r\nimport classes from './My_posts.module.css'\r\nimport Post from \"./Post/Post\";\r\nimport {MyPostsType} from \"./MyPostsContainer\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {MaxLenghtCreator, RequiredField} from \"../../../utilits/valid\";\r\nimport {TextArea} from \"../../common/formControls/formControls\";\r\n\r\n\r\n/*type MyPostsType ={\r\n    newPostText: string\r\n    addPost: (p:string)=>void\r\n    updateNewPostText: (p:string)=>void\r\n    posts:Array<postType>\r\n    dispatch: (action:ActionTypes)=>void\r\n}*/\r\n\r\nlet maxLength = MaxLenghtCreator(30);\r\n\r\nconst  MyPosts= React.memo((props: MyPostsType) =>{\r\n\r\n    let postsElement =\r\n        props.posts.map((p: any) =>\r\n            <Post id={p.id} key={p.id} content={p.content} likescount={p.likescount}/>).reverse()\r\n\r\n   let AddNewPost = (values: FormPostType) => {\r\n        props.addPost(values.newPostBody)\r\n    }\r\n\r\n    return (<div className={classes.postsBlock}>\r\n            <h2>My posts</h2>\r\n        <AddMessageFormReduxForm onSubmit={AddNewPost}/>\r\n            <div className={classes.posts}>new post</div>\r\n            {postsElement}\r\n        </div>)\r\n})\r\n\r\ntype  FormPostType={\r\n    newPostBody:string\r\n}\r\n\r\nconst AddPostForm=(props:InjectedFormProps<FormPostType>)=>{\r\n    return(\r\n    <form onSubmit={props.handleSubmit}>\r\n        <Field component={TextArea} name={'newPostBody'} placeholder={'Enter your message'}\r\n               validate={[RequiredField,maxLength]}/>\r\n    <div>\r\n        <button>Add post</button>\r\n        <button>Remove</button>\r\n    </div>\r\n   </form>)\r\n}\r\nexport const AddMessageFormReduxForm = reduxForm<FormPostType>({\r\n    form: 'ProfilePosts'\r\n})(AddPostForm)\r\n\r\nexport default MyPosts;","import {addPost, postType} from \"../../../redux/Profile-reducer\";\r\nimport MyPosts from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\n\r\nimport {AppStateType} from \"../../../redux/redux-store\";\r\nimport {Dispatch} from \"redux\";\r\n\r\ntype mapStateToPropsType ={\r\n    posts: Array<postType>\r\n    /*newPostText: string*/\r\n}\r\ntype mapDispatchToPropsType ={\r\n   /* updateNewPostText: (text: string)=> void*/\r\n    addPost: (newPostBody:string)=>void\r\n}\r\n\r\nexport type MyPostsType = mapStateToPropsType & mapDispatchToPropsType\r\n\r\nconst mapStateToProps =(state:AppStateType):mapStateToPropsType => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n       /* newPostText: state.profilePage.newPostText*/\r\n    }\r\n}\r\n\r\n\r\nconst mapDispatchToProps =(dispatch:Dispatch):mapDispatchToPropsType=>{\r\n    return{\r\n      /*  updateNewPostText: (text: string)=> {\r\n            let action = UpdateNewPostTextAC(text);\r\n            dispatch(action)\r\n        },*/\r\n        addPost: (newPostBody:string)=>{\r\n           dispatch(addPost(newPostBody));\r\n        }\r\n    }\r\n}\r\n\r\nconst MyPostsContainer =connect(mapStateToProps, mapDispatchToProps)(MyPosts);\r\n\r\nexport default MyPostsContainer;","import React from \"react\";\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport MyPostsContainer from \"./My_posts/MyPostsContainer\";\r\nimport {profileType} from \"../../redux/Profile-reducer\";\r\n\r\ntype propsType= {\r\n    profile: profileType\r\n    status: string\r\n    updateStatus:(status: string)=>void\r\n}\r\n\r\nconst Profile =(props:propsType) =>{\r\n\r\n    return(\r\n        <div >\r\n            <ProfileInfo  profile={props.profile} status={props.status} updateStatus={props.updateStatus}/>\r\n            <MyPostsContainer />\r\n        </div>\r\n    )\r\n}\r\nexport default Profile;","import React from 'react';\r\nimport Profile from './Profile';\r\nimport {connect} from \"react-redux\";\r\nimport {getStatus, getUserProfile, profileType, updateStatus} from \"../../redux/Profile-reducer\";\r\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {compose} from \"redux\";\r\n\r\n\r\n\r\nexport type MapStatePropsType = {\r\n    profile: profileType\r\n    status: string\r\n    autorizedUserID: number|null,\r\n    isAuth: boolean\r\n}\r\n\r\n\r\ntype MapDispatchPropsType ={\r\n    getUserProfile: (userId: number)=> void\r\n    getStatus:(userId: number)=>void\r\n    updateStatus:(status: string)=>void\r\n}\r\nexport type ProfilePropsType = MapStatePropsType & MapDispatchPropsType\r\ntype PathParamsType = {\r\n    userId: string\r\n}\r\ntype PropsType = RouteComponentProps<PathParamsType> & ProfilePropsType\r\nclass ProfileContainer extends React.Component<PropsType>{\r\n\r\n    componentDidMount() {\r\n        let userId= +this.props.match.params.userId;\r\n        if(!userId){\r\n            if(this.props.autorizedUserID){\r\n             userId = this.props.autorizedUserID;\r\n            } else{\r\n                this.props.history.push('/login')\r\n            }\r\n        }\r\n        this.props.getUserProfile(userId)\r\n        this.props.getStatus(userId)\r\n    }\r\n\r\n    render() {\r\n        return <Profile {...this.props}\r\n                        profile={this.props.profile}\r\n                        status={this.props.status}\r\n                        updateStatus={this.props.updateStatus}/>;\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n//let AuthRedirectComponent = withAuthRedirect(ProfileContainer)\r\n\r\n\r\nlet mapStateToProps = (state:AppStateType ): MapStatePropsType => {\r\n    return {\r\n        profile: state.profilePage.profile,\r\n        status: state.profilePage.status,\r\n        autorizedUserID: state.auth.userId,\r\n         isAuth: state.auth.isAuth}\r\n}\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {getUserProfile, getStatus, updateStatus}),\r\n    withRouter,\r\n    //withAuthRedirect\r\n)(ProfileContainer)\r\n\r\n\r\n//let WithURLDataContainerComponent = withRouter(AuthRedirectComponent)\r\n\r\n//export default connect(mapStateToProps, {getUserProfile})(WithURLDataContainerComponent);","import React from 'react';\r\nimport './App.css';\r\nimport Nav from \"./components/Nav/Nav\";\r\nimport News from \"./components/News/News\";\r\nimport Music from \"./components/Music/Music\";\r\nimport Settings from \"./components/Settings/Settings\";\r\nimport {BrowserRouter, HashRouter, Route} from \"react-router-dom\";\r\nimport UsersContainer from \"./components/Users/UsersContainer\";\r\nimport HeaderContainer from \"./components/Header/HeaderContainer\";\r\nimport LoginPage from \"./components/Login/Login\";\r\nimport {initializeApp} from \"./redux/App-reduser\";\r\nimport {connect, Provider} from \"react-redux\";\r\nimport {compose} from \"redux\";\r\nimport store, {AppStateType} from \"./redux/redux-store\";\r\nimport Preloader from \"./components/common/Preloader\";\r\nimport DialogsContainer from \"./components/Dialogs/DialogsContainer\";\r\nimport ProfileContainer from \"./components/Profile/ProfileContainer\";\r\n\r\n\r\n//const DialogsContainer = React.lazy(() => import('./components/Dialogs/DialogsContainer'));\r\n//const ProfileContainer = React.lazy(() => import('./components/Profile/ProfileContainer'));\r\n\r\nclass App extends React.Component<any,any> {\r\n\r\n    componentDidMount() {\r\n        this.props.initializeApp()\r\n    }\r\n    render() {\r\n        if(!this.props.initialized){return <Preloader />}\r\n        return (\r\n            <BrowserRouter >\r\n                <div className='app-w'>\r\n                    <HeaderContainer/>\r\n                    <Nav/>\r\n                    <div className='app-wrapper-content'>\r\n                        <Route path='/dialogs'\r\n                                  render={() => <DialogsContainer/>}/>\r\n                        <Route path='/profile/:userId?' render={() => <ProfileContainer/>\r\n                               }/>\r\n                        <Route path='/news' render={() => <News/>}/>\r\n                        <Route path='/music' render={() => <Music/>}/>\r\n                        <Route path='/settings' render={() => <Settings/>}/>\r\n                        <Route path='/users' render={() => <UsersContainer/>}/>\r\n                        <Route path='/login' render={() => <LoginPage/>}/>\r\n                    </div>\r\n                </div>\r\n            </BrowserRouter>\r\n        );\r\n    }\r\n}\r\n\r\ntype MapStatePropsType={\r\n    initialized: boolean\r\n}\r\nconst mapStateToProps = (state: AppStateType): MapStatePropsType => ({\r\n    initialized: state.app.initialized\r\n})\r\n\r\nlet AppContainer = compose(connect(mapStateToProps, {initializeApp}))(App);\r\nlet MainApp= ()=>{\r\n    return (<HashRouter basename={process.env.PUBLIC_URL}>\r\n        <Provider store={store}>\r\n            <AppContainer />\r\n        </Provider>\r\n    </HashRouter>)\r\n}\r\nexport default MainApp;\r\n\r\n\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport {BrowserRouter} from \"react-router-dom\";\r\nimport MainApp from \"./App\";\r\n\r\n\r\n    ReactDOM.render(\r\n        <BrowserRouter>\r\n            <MainApp />\r\n        </BrowserRouter>,\r\n        document.getElementById('root')\r\n    );\r\n\r\n\r\n   /* store.subscribe(()=>{\r\n    //let state= store.getState();\r\n    let state= store.getState();\r\n    rerenderEntireTree()});*/\r\n//reportWebVitals(rerenderEntireTree);","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Nav_nav__3JbRy\",\"item\":\"Nav_item__1Oa0p\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"selectedPage\":\"Pagenator_selectedPage__18QZq\",\"paginator\":\"Pagenator_paginator__1oB2z\",\"page\":\"Pagenator_page__ISEPa\",\"bottomDisabled\":\"Pagenator_bottomDisabled__2WDRG\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormControle_formControl__31R8H\",\"error\":\"FormControle_error__2n--o\",\"formSMRError\":\"FormControle_formSMRError__26FCH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__31SCb\",\"dialogItems\":\"Dialogs_dialogItems__28kmj\",\"active\":\"Dialogs_active__2vT_-\",\"massages\":\"Dialogs_massages__3atg6\",\"styleSendMessage\":\"Dialogs_styleSendMessage__2ux_B\",\"button\":\"Dialogs_button__3_xC_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"friendAvatar\":\"FriendsBlock_friendAvatar__hX73e\",\"name\":\"FriendsBlock_name__2wW7D\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__3eExx\",\"loginBlock\":\"Header_loginBlock__3vTby\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialog\":\"DialogItem_dialog__vPL_8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"My_posts_postsBlock__3Yb69\",\"posts\":\"My_posts_posts__2GM22\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__1ElgH\"};"],"sourceRoot":""}